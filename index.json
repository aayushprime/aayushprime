[{"content":"I was hit by one of these \u0026ldquo;you didn\u0026rsquo;t know this, now suffer\u0026rdquo; moments today. I was working on a websocket server and was gradually adding new functionality. Out of nowhere, the server started disconnecting the client. Without any error whatsoever. I even wasted some time thinking maybe the client was doing something wrong.\nThen with no luck with anything I tried, I tried to use the debugger. The debugger would execute the last line of a function and then the client would disconnect. This is the exact function\n1 2 3 4 5 6 7 8 9 10 func (g *Game) ShuffleCardsForPlayers() { for _, player := range g.State.Players { original := g.State.PlayerHands[player] rand.Shuffle(len(original), func(i, j int) { original[i], original[j] = original[j], original[i] }) g.State.PlayerHands[player] = original[:4] g.State.PlayerDecks[player] = original[4:] } } This function was called from the handleMove function and there are other steps after it. But the client would disconnect and not run anything after this function. So, I added logs, logs and more logs. I disabled the whole function and found out it was fine. Then I added logs and found everything was printed except the last line (after the g.State.PlayerDecks[player] = original[4:] was executed.\nThis is even stranger since both the PlayerHands and PlayerDecks are exact same type. And I would have loved to see the panic message. But, nothing. Then after some googling and ChatGPT, I found out the problem was this.\nA struct field that is declared as a map in Go will be nil by default. If you try to read from a nil map, it will not panic, but if you try to write to it, it will panic with a runtime error.\nAnd where was my error/panic going? The net/http package in Go has a default recovery middleware that recovers from panics and logs them. However, if you are using a custom handler or if the panic occurs outside of the HTTP request context (like in a goroutine), it will not be caught by this middleware.\n1 2 3 4 5 6 7 8 9 go func() { defer func() { if p := recover(); p != nil { panicChan \u0026lt;- p } }() h.handler.ServeHTTP(tw, r) close(done) }() Lesson learnt, I guess!\n","permalink":"https://lamichhaneaayush.com.np/posts/golang-silent-panic/","summary":"\u003cp\u003eI was hit by one of these \u0026ldquo;you didn\u0026rsquo;t know this, now suffer\u0026rdquo; moments today.\nI was working on a websocket server and was gradually adding new functionality. Out of nowhere, the server started disconnecting the client. Without any error whatsoever. I even wasted some time thinking maybe the client was doing something wrong.\u003c/p\u003e\n\u003cp\u003eThen with no luck with anything I tried, I tried to use the debugger. The debugger would execute the last line of a function and then the client would disconnect.\nThis is the exact function\u003c/p\u003e","title":"Why is my Golang server (not) crashing?"},{"content":"Wouldn\u0026rsquo;t it be great if you could take your commands with you everywhere? Sure aliases are great but can you really put a price on the feeling of just getting the command you want when you are in a ssh session?\nSo here it is. Use tmux snippets. Your terminal remembers your commands for you.\nInstallation Use tmux plugin manager tpm to install the plugin.\n1 set -g @plugin \u0026#39;nyuyuyu/tmux-pet\u0026#39; Use prefix + I (Uppercase I) to install the plugin using TPM.\nThen set the trigger key by setting the variable @tmux-new-pane-key\nset -g @pet-new-pane-key 'C-f'\nDetailed instructions are present in the nyuyuyu/tmux-pet repository.\nThe plugin depends on pet so install it.\nThen you can use pet to manage your snippets. pet edit\nAnd call the tmux plugin to insert your snippets.\nQuickly fetch important info I wanted to extend this a bit more. So I added another command to put the selected snippet into the clipboard. This way you can quickly fetch your snippet and paste it somewhere. You can save information that needs to be copied over and over like your address, email, profile links, etc.\nSimilar to the original plugin, install it using tpm.\n1 set -g @plugin \u0026#39;aayushprime/tmux-pet\u0026#39; On this one, you can set the trigger key using the variable @tmux-pet-copy-key.\n1 set -g @pet_new_pane_copy_key \u0026#39;C-p\u0026#39; Then the selected snippet will be copied to the clipboard! Yay!\n","permalink":"https://lamichhaneaayush.com.np/posts/tmux-snippets-plugin/","summary":"\u003cp\u003eWouldn\u0026rsquo;t it be great if you could take your commands with you everywhere?\nSure aliases are great but can you really put a price on the feeling of just getting the command you want when you are in a ssh session?\u003c/p\u003e\n\u003cp\u003eSo here it is. Use tmux snippets. Your terminal remembers your commands for you.\u003c/p\u003e\n\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\u003cp\u003eUse tmux plugin manager \u003ccode\u003etpm\u003c/code\u003e to install the plugin.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset -g @plugin \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;nyuyuyu/tmux-pet\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eUse \u003ccode\u003eprefix + I\u003c/code\u003e (Uppercase I)  to install the plugin using TPM.\u003c/p\u003e","title":"Tmux Snippets (take your commands with you everywhere!)"},{"content":"Today I was trying to implement the Snowflake Id generator for Fly.io Gossip Glomers second challenge, Unique Id generation. Here\u0026rsquo;s what I came up with.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 package main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;log\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;time\u0026#34; maelstrom \u0026#34;github.com/jepsen-io/maelstrom/demo/go\u0026#34; ) type Snowflake struct { sequenceNumber uint64 selfId int lastTs int64 } func nextId(s *Snowflake) uint64 { ts := time.Now().UnixMilli() // this is 41 bits if s.lastTs == ts { s.sequenceNumber++ } else { s.sequenceNumber = 0 } s.lastTs = ts var id uint64 = uint64(ts \u0026lt;\u0026lt; 22) // (64 - 1 sign bit - 41 unix timestamp bits) log.Printf(\u0026#34;shifted %d\u0026#34;, id) id = id | ((uint64(s.selfId) \u0026amp; 0x3f) \u0026lt;\u0026lt; 16) // machine id is 10 bits log.Printf(\u0026#34;after self Id %d\u0026#34;, id) id = id | ((s.sequenceNumber \u0026amp; 0xffff) ) return id } func main() { n := maelstrom.NewNode() sf := \u0026amp;Snowflake{} n.Handle(\u0026#34;generate\u0026#34;, func(msg maelstrom.Message) error { var body map[string]any if err := json.Unmarshal(msg.Body, \u0026amp;body); err != nil { return err } selfId, err := strconv.Atoi(msg.Dest[1:]) if err != nil { log.Fatal(\u0026#34;Cannot parse destination as a number\u0026#34;, msg.Dest) } sf.selfId = selfId body[\u0026#34;type\u0026#34;] = \u0026#34;generate_ok\u0026#34; body[\u0026#34;id\u0026#34;] = nextId(sf) return n.Reply(msg, body) }) if err := n.Run(); err != nil { log.Fatal(err) } } It wasn\u0026rsquo;t too bad for how simple its supposed to be. My solution wasn\u0026rsquo;t getting accepted by maelstrom because there were duplicate Ids generated by my program. After looking at my code for very long and not finding any idea what went wrong, I asked ChatGPT, it suggested the sequenceNumber bits were too few and must probably be overflowing. After looking at the maelstrom logs I found the lines which had duplicate Ids.\nThat was very strange. I noticed all IDs generated ended with 000. Surely, I made a mistake on the bitwise OR of the sequence number, right?\nWrong.\nI figured out how to log to stderr and looked at what my Ids were.\n1 2 id = id | ((s.sequenceNumber \u0026amp; 0xffff) ) log.Printf(\u0026#34;Sequence Number: %d %u %lu\u0026#34;, id, id, id) And they were unique alright. For a second I thought that Golang must be casting my Ids into some other datatype and truncating my IDs. But that was not it. It was maelstrom it wouldn\u0026rsquo;t accept the last 3 digits. I think this is because we\u0026rsquo;re using JSON and while JSON doesn\u0026rsquo;t limit the size of the number in its spec (see here), there might be something in the middle that cannot accept that number and is thus being truncated. NodeJS for example can only process numbers upto\n1 2 3 \u0026gt; Number.MAX_SAFE_INTEGER 9007199254740991 \u0026gt; So the solution is to just move the sequenceNumber a few bits up as we have plenty of space left in the sequenceNumber space. maelstrom test cases dont generate too many ids in the same millisecond.\n1 id = id | ((s.sequenceNumber \u0026amp; 0xffff) \u0026lt;\u0026lt; 10) ","permalink":"https://lamichhaneaayush.com.np/posts/snowflake-max-int-problem/","summary":"\u003cp\u003eToday I was trying to implement the Snowflake Id generator for \u003ca href=\"https://fly.io/dist-sys/\"\u003eFly.io Gossip Glomers\u003c/a\u003e second challenge, \u003ccode\u003eUnique Id\u003c/code\u003e generation.\nHere\u0026rsquo;s what I came up with.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e60\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e61\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e62\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;strconv\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003emaelstrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/jepsen-io/maelstrom/demo/go\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSnowflake\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esequenceNumber\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eselfId\u003c/span\u003e         \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elastTs\u003c/span\u003e         \u003cspan style=\"color:#66d9ef\"\u003eint64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enextId\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eSnowflake\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003euint64\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ets\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNow\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003eUnixMilli\u003c/span\u003e() \u003cspan style=\"color:#75715e\"\u003e// this is 41 bits\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elastTs\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ets\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esequenceNumber\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esequenceNumber\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elastTs\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ets\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003euint64\u003c/span\u003e = uint64(\u003cspan style=\"color:#a6e22e\"\u003ets\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// (64 - 1 sign bit - 41 unix timestamp bits)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;shifted %d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e | ((uint64(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eselfId\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x3f\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// machine id is 10 bits\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;after self Id %d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e | ((\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esequenceNumber\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0xffff\u003c/span\u003e) )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emaelstrom\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewNode\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esf\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eSnowflake\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHandle\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;generate\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emsg\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emaelstrom\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003eany\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnmarshal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emsg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eselfId\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrconv\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAtoi\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emsg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDest\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cannot parse destination as a number\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emsg\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDest\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003esf\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eselfId\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003eselfId\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;generate_ok\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e] = \u003cspan style=\"color:#a6e22e\"\u003enextId\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esf\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReply\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emsg\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003en\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRun\u003c/span\u003e(); \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eIt wasn\u0026rsquo;t too bad for how simple its supposed to be. My solution wasn\u0026rsquo;t getting accepted by \u003ccode\u003emaelstrom\u003c/code\u003e because there were duplicate Ids generated by my program. After looking at my code for very long and not finding any idea what went wrong, I asked ChatGPT, it suggested the \u003ccode\u003esequenceNumber\u003c/code\u003e bits were too few and must probably be overflowing. After looking at the maelstrom logs I found the lines which had duplicate Ids.\u003c/p\u003e","title":"Where are my bits getting lost?"},{"content":"Welcome to another one of my interesting findings, where I explore some stuff for fun and profit just fun\nA while back I was solving AOC and for a problem (day 13), I had this sort of clever idea of using eval to skip writing a if else ladder. The input file had the following structure\nStarting items: 91, 65 Operation: new = old * 13 Test: divisible by 5 If true: throw to monkey 7 If false: throw to monkey 4 I had to parse the file to get all values, but when parsing the second line I thought why not use the python interpretor itself. And so, I created a variable called old and whenever it needed updating I would use the following line\nold = eval( \u0026#34;line 2 after the equal part\u0026#34; ) The clever part was that I was skipping having to translate whatever symbol was present in the input (one of +, - , / or *) This was fine for the test input, but it became slow when I ran it against the larger input.\nI ran python -m cProfile main.py to find out that it was eval that took a bunch of time. It was being invoked a lot of time because it was called in the update loop.\nSo, I thought,\nwhy not store the function into a lambda before hand and then just call the lambda instead of calling eval? And that\u0026rsquo;s exactly what I did, and it worked. The unoptimized program took about 6 seconds when running on the complete input. But after I stored the operation in a lambda, it was basically instant. So, here is the main \u0026ldquo;trick\u0026rdquo;\noperation = eval(\u0026#34;lambda old: \u0026#34; + lines[2].split(\u0026#34;=\u0026#34;)[1].strip()) Notice the parameter name of the lambda \u0026ldquo;old\u0026rdquo; it is necessary because the string is \u0026ldquo;old\u0026rdquo; in the input.\nSo, why is running eval repeatedly slow?\nEval is used for evaluating dynamic expressions, but we already have a fixed expression, so eval is doing extra work trying to evaluate the same expression many times, if we compile the expression to a lambda, we can just execute a lambda and it is a lot faster.\n","permalink":"https://lamichhaneaayush.com.np/posts/solveeval/","summary":"\u003cp\u003eWelcome to another one of my interesting findings, where I explore some stuff for fun \u003cdel\u003eand profit\u003c/del\u003e \u003cstrong\u003ejust fun\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA while back I was solving \u003ca href=\"https://adventofcode.com/\"\u003eAOC\u003c/a\u003e and for a problem (day 13), I had this sort of clever idea of using eval to skip writing a \u003ccode\u003eif else\u003c/code\u003e  ladder.\nThe input file had the following structure\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Monkey\" data-lang=\"Monkey\"\u003e  Starting items: 91, 65\n  Operation: new = old * 13\n  Test: divisible by 5\n    If true: throw to monkey 7\n    If false: throw to monkey 4\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI had to parse the file to get all values, but when parsing the second line I thought why not use the python interpretor itself. And so, I created a variable called \u003ccode\u003eold\u003c/code\u003e and whenever it needed updating I would use the following line\u003c/p\u003e","title":"Python: Solving slow eval"},{"content":"Today I tried to write an fstab entry so that my drive would automount on boot.\nIt went as smoothly as I had hoped (at first).\nSo, I ran sudo blkid to find the UUID of the drive I wanted to mount and added the entry UUID=288C1E6C8C1E3532 /hdrive auto defaults 0 0 following the steps in this wonderful article. (Some options are different after I realized what I wanted.)\nArticle\nThen I ran sudo mount -a to check if the mounts were working properly. But here the problem began. The drive was mounted as readonly. There is no mention of readonly mount in the options.\nIn fact I learnt that defaults option is shorthand for rw (read write) and bunch of other options. Then I tried various mount options and got sick of rebooting. I tried directly mounting as ntfs instead of auto. But it didn\u0026rsquo;t work.\nAfter lot of struggle I figured out the problem. It was because of my Windows Installation!\nI have dual boot setup. And turns out windows stores some files for faster booting (fast boot) in the harddisk thus linux cannot mount the drive cleanly and can only mount it as a read only drive. So to fix this I had to boot to windows and change the fast boot setting. Here\u0026rsquo;s how,\nGo to control panel Power options Choose what the power buttons do Turn off fastboot\nAnd after that the same fstab entry worked. Here\u0026rsquo;s the SO entry where I found the fix: SO ","permalink":"https://lamichhaneaayush.com.np/posts/fstab-problem/","summary":"\u003cp\u003eToday I tried to write an \u003ccode\u003efstab\u003c/code\u003e entry so that my drive would automount on boot.\u003cbr\u003e\nIt went as smoothly as I had hoped (at first).\u003cbr\u003e\nSo, I ran \u003ccode\u003esudo blkid\u003c/code\u003e to find the UUID of the drive I wanted to mount and added the entry \u003ccode\u003eUUID=288C1E6C8C1E3532 /hdrive auto defaults 0 0\u003c/code\u003e following the steps  in this wonderful article. (Some options are different after I realized what I wanted.)\u003cbr\u003e\n\u003ca href=\"https://www.techrepublic.com/article/how-to-properly-automount-a-drive-in-ubuntu-linux/\"\u003eArticle\u003c/a\u003e\u003cbr\u003e\nThen I ran \u003ccode\u003esudo mount -a\u003c/code\u003e to check if the mounts were working properly. But here the problem began. The drive was mounted as readonly. There is no mention of readonly mount in the options.\u003cbr\u003e\nIn fact I learnt that \u003ccode\u003edefaults\u003c/code\u003e option is shorthand for \u003ccode\u003erw\u003c/code\u003e (read write) and bunch of other options.\nThen I tried various mount options and got sick of rebooting. I tried directly mounting as \u003ccode\u003entfs\u003c/code\u003e instead of \u003ccode\u003eauto\u003c/code\u003e. But it didn\u0026rsquo;t work.\u003cbr\u003e\nAfter lot of struggle I figured out the problem. It was because of my Windows Installation!\u003cbr\u003e\nI have dual boot setup. And turns out windows stores some files for faster booting (fast boot) in the harddisk thus linux cannot mount the drive cleanly and can only mount it as a read only drive. So to fix this I had to boot to windows and change the fast boot setting. Here\u0026rsquo;s how,\u003c/p\u003e","title":"Why does my drive mount as read only?"},{"content":"I recently learned that Google Sheets can be used as a database (although with caveats I hear). And I love it.\nIt is so much easier to see what is in the spreadsheet than on a sqlite file.\nPlus, google sheets works everywhere!\nSo, to get started, the official way to do this is from the google developers website.\nhttps://developers.google.com/sheets/api/guides/concepts\nIt is not so easy to understand for a beginner(which I am). So, upon further looking around I came across this wonderful python library that makes things so much easier. It\u0026rsquo;s gspread.\nHow to get started (quickly) Go to Google Cloud Console (login of course) Create a new project if you haven\u0026rsquo;t already Go to API dashboard Then click enable APIs and Services Search for google drive and enable in Then click manage to go to this page Click credentials \u0026gt; create credentials \u0026gt; service account Enter a name and URL and click continue Select the Editor role Continue and Done! Then click on the service account you just created Keys \u0026gt; Create New Key \u0026gt; Select JSON A file should download You can either add the email to your own google sheets via Share\u0026gt; Invite people and paste this email or create your own spreadsheet. Python code Now the code side of things, first of all, install 2 python packages, gspread and oauth2client\npip install gspread oauth2client should do the trick.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import gspread from oauth2client.service_account import ServiceAccountCredentials scope = [ \u0026#34;https://spreadsheets.google.com/feeds\u0026#34;, \u0026#34;https://www.googleapis.com/auth/spreadsheets\u0026#34;, \u0026#34;https://www.googleapis.com/auth/drive.file\u0026#34;, \u0026#34;https://www.googleapis.com/auth/drive\u0026#34;, ] # credentials.json is the file you downloaded from google console # (rename appropriately) creds = ServiceAccountCredentials.from_json_keyfile_name(\u0026#34;credentials.json\u0026#34;, scope) client = gspread.authorize(creds) # the name of your spreadsheet in google sheets dbname = \u0026#34;googlesheetsname\u0026#34; sheet = client.open(dbname).sheet1 data = sheet.get_all_records() row = sheet.row_values(1) col = sheet.col_values(2) Using the library is very easy. See gspread docs for more details\nhttps://docs.gspread.org/en/latest/\n","permalink":"https://lamichhaneaayush.com.np/posts/google-sheets/","summary":"\u003cp\u003eI recently learned that Google Sheets can be used as a database (although with caveats I hear). And I love it.\u003cbr\u003e\nIt is so much \u003cstrong\u003eeasier\u003c/strong\u003e to see what is in the spreadsheet than on a sqlite file.\u003cbr\u003e\nPlus, google sheets works everywhere!\u003cbr\u003e\nSo, to get started, the official way to do this is from the google developers website.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://developers.google.com/sheets/api/guides/concepts\"\u003ehttps://developers.google.com/sheets/api/guides/concepts\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eIt is not so easy to understand for a beginner(which I am).\nSo, upon further looking around I came across this wonderful python library that makes things so much easier.\nIt\u0026rsquo;s \u003ccode\u003egspread\u003c/code\u003e.\u003c/p\u003e","title":"Google Sheets as Database?"},{"content":"Hi, I\u0026rsquo;m Aayush👋 I\u0026rsquo;m a Computer Engineering student at Pulchowk.\nPassionate about: Python, Opensource, AI, Blockchain, Graphics\nMajor Interests Programming Blockchain AI/ML ","permalink":"https://lamichhaneaayush.com.np/about/","summary":"\u003ch2 id=\"hi-im-aayush\"\u003eHi, I\u0026rsquo;m Aayush👋\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m a Computer Engineering student at Pulchowk.\u003cbr\u003e\nPassionate about: Python, Opensource, AI, Blockchain, Graphics\u003c/p\u003e\n\u003ch2 id=\"major-interests\"\u003eMajor Interests\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eProgramming\u003c/li\u003e\n\u003cli\u003eBlockchain\u003c/li\u003e\n\u003cli\u003eAI/ML\u003c/li\u003e\n\u003c/ul\u003e","title":"About"},{"content":"Today the coding calendar Advent of Code started.\nYou should try it too, Advent of Code.\nI tried to solve the first challenge. It was pretty straight forward. Except, I was stumped by a simple problem.\nHere is my first attempt,\n1 2 3 4 5 6 7 8 9 10 11 12 def part1(lines): prev = lines[0] more = 0 for i in range(len(lines) - 1): if lines[i+1] \u0026gt; prev: more += 1 prev = lines[i+1] print(more) if __name__ ==\u0026#39;__main__\u0026#39;: with open(\u0026#39;./input/day1.txt\u0026#39;, \u0026#39;r\u0026#39;) as f: lines = [a.strip() for a in f.readlines()] part1(lines) The thing is it gives correct result for the test data. So, I assumed it would work for the input data. But, the program always gave me 1 less than the actual answer. I couldn\u0026rsquo;t figure out why.\nNotice, I use string comparison in the if condition on line 5. I knew using string for comparison of numbers was a bad idea but, the following IDLE experiments convinced me otherwise.\n1 2 3 4 \u0026gt;\u0026gt;\u0026gt; \u0026#34;123\u0026#34; \u0026gt; \u0026#34;456\u0026#34; False \u0026gt;\u0026gt;\u0026gt; \u0026#34;456\u0026#34; \u0026gt; \u0026#34;123\u0026#34; True If you didn\u0026rsquo;t know (I certainly didn\u0026rsquo;t) you can compare strings with the \u0026gt; and \u0026lt; operators in python. This led me to believe that comparing numbers would work without explicitly using integers.\n1 2 \u0026gt;\u0026gt;\u0026gt; \u0026#34;1024\u0026#34;\u0026gt;\u0026#34;946\u0026#34; False Here is the problem. String comparison compares the first character of the strings and the tries to distinguish which is larger. Here, even though 1024 is greater than 946, 9 is greater than 1! The string comparison operator doesn\u0026rsquo;t know better. I could\u0026rsquo;ve casted them to integers or zfilled them to have same number of digits to solve the problem.\nAnd I did, the program now works!\n1 2 3 4 if __name__ ==\u0026#39;__main__\u0026#39;: with open(\u0026#39;./input/day1.txt\u0026#39;, \u0026#39;r\u0026#39;) as f: lines = [int(a.strip()) for a in f.readlines()] part1(lines) So, the takeaway is, use numbers(the datatype) when dealing with numbers.\n","permalink":"https://lamichhaneaayush.com.np/posts/string-bug/","summary":"\u003cp\u003eToday the coding calendar Advent of Code started.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYou should try it too, \u003ca href=\"https://adventofcode.com\"\u003eAdvent of Code\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eI tried to solve the first challenge. It was pretty straight forward.\nExcept, I was stumped by a simple problem.\u003cbr\u003e\nHere is my first attempt,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epart1\u003c/span\u003e(lines):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lines[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    more \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(len(lines) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e lines[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e prev:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            more \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lines[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(more)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;./input/day1.txt\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        lines \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [a\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip() \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e f\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereadlines()]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    part1(lines)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eThe thing is it gives correct result for the test data. So, I assumed it would work for the input data. But, the program always\ngave me 1 less than the actual answer. I couldn\u0026rsquo;t figure out why.\u003cbr\u003e\nNotice, I use string comparison in the if condition on line 5.\nI knew using string for comparison of numbers was a bad idea but, the following IDLE experiments convinced me otherwise.\u003c/p\u003e","title":"String Bug"},{"content":"Welcome! This is the first post of my blog!\nWhat is this about? In an attempt to make myself \u0026ldquo;productive\u0026rdquo;, I try to write about anything I find interesting.\nTell me something interesting at lamichhaneaayush5@gmail.com\n","permalink":"https://lamichhaneaayush.com.np/posts/first/","summary":"\u003ch2 id=\"welcome\"\u003eWelcome!\u003c/h2\u003e\n\u003cp\u003eThis is the first post of my blog!\u003c/p\u003e\n\u003ch2 id=\"what-is-this-about\"\u003eWhat is this about?\u003c/h2\u003e\n\u003cp\u003eIn an attempt to make myself \u0026ldquo;productive\u0026rdquo;, I try to write about anything I find interesting.\u003c/p\u003e\n\u003cp\u003eTell me something interesting at \u003ca href=\"mailto:lamichhaneaayush5@gmail.com\"\u003elamichhaneaayush5@gmail.com\u003c/a\u003e\u003c/p\u003e","title":"First"}]